<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Welcome</title>
    <link>http://www.alessandrobaffa.com/post/index.xml</link>
    <description>Recent content in Post-rsses on Welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <copyright>(c) 2015 Alessandro Baffa.</copyright>
    <lastBuildDate>Sun, 06 Nov 2016 17:46:50 +0100</lastBuildDate>
    <atom:link href="http://www.alessandrobaffa.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Raising The Bar With Science</title>
      <link>http://www.alessandrobaffa.com/2016/11/06/raising-the-bar-with-science/</link>
      <pubDate>Sun, 06 Nov 2016 17:46:50 +0100</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/11/06/raising-the-bar-with-science/</guid>
      <description>

&lt;p&gt;During &lt;a href=&#34;https://socrates-fr.github.io/&#34;&gt;SoCraTes France&lt;/a&gt; we had a session called &lt;em&gt;Beyond Alchemy and What are the Software Leprechauns?&lt;/em&gt; with &lt;strong&gt;Laurent Bossavit&lt;/strong&gt;, author of The &lt;a href=&#34;https://leanpub.com/leprechauns&#34;&gt;Leprechauns of Software Engineering&lt;/a&gt;. We discussed about what we could do, as a community of professional developers, to raise the bar of our industry by starting to merge the scientific method used by academics and the huge amount of data from &lt;em&gt;the real world&lt;/em&gt; of the industry.&lt;/p&gt;

&lt;p&gt;The idea of this session was inspired by a discussion started some time ago on the Software Craftsmanship Slack with &lt;strong&gt;Alexandru Bolboaca&lt;/strong&gt;, and then he wrote a great article on his blog: &lt;a href=&#34;http://www.alexbolboaca.ro/articles/three-problems-for-the-next-era-of-software-craftsmanship&#34;&gt;&lt;em&gt;Three Problems For The Next Era of Software Craftsmanship&lt;/em&gt;&lt;/a&gt;. Three challenges that we, as a community of developers, could try to solve to raise the bar of our industry:
1. &lt;strong&gt;Eradicate legacy code&lt;/strong&gt;
2. &lt;strong&gt;Raise the standard of proof&lt;/strong&gt;
3. &lt;strong&gt;Educate the next generation on real world software development techniques&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uncle Bob always talks about - and I agree with him - the idea of a real Profession of Software Development, as doctors or lawyers have. But what are the roots of a real Profession? What is the difference that is still there between the making of software and the other professions?&lt;/p&gt;

&lt;h2 id=&#34;a-profession-is-based-on-measurements&#34;&gt;A Profession is based on measurements&lt;/h2&gt;

&lt;p&gt;Other professions focused on their practices and they measured their progresses. Doctors historically have documented every aspect of what they have been doing in order to improve their profession, and once they had a set of objective, well documented, measured and tested practices, they put ethics rules on top. The Profession started. They now have a set of rules and practices that they all follow. They are teached at school and they are continuously improved by the community working closely with Science and data (and those who don&amp;rsquo;t follow them are expelled).&lt;/p&gt;

&lt;h2 id=&#34;alchemy-and-reinventing-the-wheel&#34;&gt;Alchemy and Reinventing the Wheel&lt;/h2&gt;

&lt;p&gt;In Software Engineering we still behave like in Alchemy. We try things, sometimes they work, sometimes they don&amp;rsquo;t. We never really measure them. We create technology on top of technology and we switch from one technical choice to another, sometimes based on our guts or wrong assumptions. We advocate for technologies or methodologies, but we don&amp;rsquo;t have empirical data to really sustain our arguments. We still write legacy code despite all the books, talks and failures of the past. We still have religious fights between technical choices that could be measured instead. We still have to sell to the management that spending time on testing is good for the business. Computer Science courses still don&amp;rsquo;t tech books like &lt;em&gt;Clean Code&lt;/em&gt; or &lt;em&gt;Refactoring&lt;/em&gt; (maybe only very few cases in the world). The education of the next real world software engineers is still left to their practical exprience at work, we are not using the experience from the industry to make education grow.&lt;/p&gt;

&lt;p&gt;The distance between the real industry and academics is still so long. There are many scientific papers and excellent researchers on Empirical Software Engineering, but their problem is that they still miss enough data to come to shared and definitive conclusions.&lt;/p&gt;

&lt;p&gt;Despite all the technological changes and incredible improvements of the last decades, we are still reinventing the wheel over and over again when it comes to our development practices.&lt;/p&gt;

&lt;h2 id=&#34;open-our-data-to-the-community&#34;&gt;Open our data to the community&lt;/h2&gt;

&lt;p&gt;During SoCraTes France we discussed about this.
What if we could start to measure what we do? What if we could start to fill this gap between the scientific method and the choices we make in our industry? What if we could provide enough empirical data so that willing people or researchers, on day, could use them and come up with new ideas, theories or conclusion? What if we could open the huge amount of data from everything we do when we write software with the community, and finally start to grow as a Profession?&lt;/p&gt;

&lt;p&gt;During SoCraTes France Laurent Bossavit mentioned the idea of a database of information about bugs. Information that could tell us everything about how these bugs were created. Info like the programming language used, how many people in the teams were involved, what was the error which caused the bug, did they work in Scrum/XP, did they do TDD or not, etc&amp;hellip;it was just an idea thrown quickly during the discussion, but it could be an interesting path to follow that could be source of many different statistics.&lt;/p&gt;

&lt;p&gt;What we would need is a way to make these data available for everyone for free. We need professional developers willing to help by providing generic and anonymous data about their practices, their methodologies and the tecnologies they use. We need a platform able to collect these data and make them available for everyone. And we need these data to be sent possibly hassle-free for the developers. We need people with knowledge about how to set up scientific test cases in order to know which kind of data we would need. We need lots of things.&lt;/p&gt;

&lt;p&gt;We are in the core of the technology era, we have to start to measure how we work.&lt;br /&gt;
We need to formalize our practices based on empirical data that can show us what&amp;rsquo;s working and what&amp;rsquo;s not. We need to stop religious fights with technologies.&lt;/p&gt;

&lt;p&gt;We have to grow based on measurements and Science.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Back from SoCraTes France 2016</title>
      <link>http://www.alessandrobaffa.com/2016/10/31/back-from-socrates-france-2016/</link>
      <pubDate>Mon, 31 Oct 2016 12:29:46 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/10/31/back-from-socrates-france-2016/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../../../../img/socratesfr-1.jpeg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;My second time in a Software Craftsmanship and Testing (SoCraTes) conference and, as always, it has been an awesome experience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/socratesfr-2.jpeg&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-self-made-agenda&#34;&gt;The self-made agenda&lt;/h2&gt;

&lt;p&gt;SoCraTes is a non-conference, which means that there’s no predefined agenda, but instead it is created every day by the participants (the image above is the agenda of day 2). Everybody is more than welcome to propose sessions. They can be presentation of something you know, or open discussion about a topic you are curious about, or more simply a session where you want to learn something and you are looking for someone more experienced to help you.
As for the Global Day of Coderetreat, what you learn during SoCraTes is your responsibility. Open mind, will to learn and the Law of Two Feet are the only things you have to bring with you to this event.&lt;/p&gt;

&lt;p&gt;Sessions I attended:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;event storming and DDD&lt;/strong&gt;. I never got into both subjects so it’s been a nice introduction.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Functional philosophy&lt;/strong&gt;. Functional programming is the first item in my todo list since too long and after this excellent presentation I decided to enroll in the course on Coursera. For the second time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How to teach TDD&lt;/strong&gt;. Help other people to learn is something I really love to do. We shared experience and techniques on how to introduce TDD to other people/colleagues and it was interesting. Even though, inevitably, it switched to a broader discussion about organizational issues. But still, interesting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Event sourcing&lt;/strong&gt;. Again, another subject I never studied. So, good introduction.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Feature branching is evil&lt;/strong&gt;. Thierry has a good experience as technical coach and he’s a passionate guy. He prepared this interesting presentation the night between day 1 and day 2 . Obviously the topic was sensible for many people, so the discussions were very interesting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/socratesfr-3.jpeg&#34;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tactical DDD&lt;/strong&gt;. Another presentation that made me understand how I absolutely don’t know anything at all about DDD and that it is such a huge topic.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Beyond Alchemy and What are Software Leprechauns&lt;/strong&gt; (by @cceelen and Laurent Bossavit). Laurent is the author of The Leprechauns of Software Engineering. We discussed about the distance between the software industry and the scientific method. We work in an industry where most of the choices are too often made based on personal tastes and/or wrong assumptions. Also, the academics working on empirical software engineering most of the time lack of real data and statistics from the real world. We work in an industry that it’s like Alchemy.
What if the software craftsmanship community could help the academics to get these data? Or what if all of us could start applying the scientific method to the choices we make every day? What if we could document all the things we do, the practices and the techniques we use at work, the good and bad results, and make them available for scientists so to start to make the industry grow?
In the Software Craftsmanship movement we always talk about the Profession of Software Engineer, but how can we have a Profession if we don’t even have a museum of Computer History (or really very few of them in the entire world)? How many of you, computer scientists, have ever been to such a museum? How much do we know about our History as computer scientists? How much do we know about the History of all the things that we choose to use?
Listening to Laurent Bossavit has been maybe the most fascinating experience for me in the entire event. His book here below is already in my kindle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/socratesfr-4.png&#34;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Instill Software Craftsmanship in a company&lt;/strong&gt;. Well, this is basically what I’m doing since one year in my current company. I attended this interesting session to get feedback from other people doing the same in their ones and share our experience with them.
&lt;img src=&#34;../../../../img/socratesfr-5.jpeg&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learning Strategies&lt;/strong&gt; (by me). One of the questions I’m always been asked when I say that it’s good to always try to practice and become better software developers is “yes, but we have a family/children/life/friends/whatever and we don’t have time”. I organized this session to know how other people do. Most of the people use their working time to study. Either because their company give them a dedicated time to do so during the week, or because they take their time by themselves. Avoid those companies that don’t give you time to become better employees.
&lt;img src=&#34;../../../../img/socratesfr-6.jpeg&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code katas&lt;/strong&gt;. Romeu organized code katas every lunch and dinner. Basically, every time there was an empty space in the agenda. I did a couple of them and they were absolutely fantastic! Definitely something I will do again with other things I organize. Romeu gave us so many brilliant ideas!
&lt;img src=&#34;../../../../img/socratesfr-7.jpeg&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-things-worth-mentioning&#34;&gt;Other things worth mentioning&lt;/h2&gt;

&lt;p&gt;The food. Absolutely gorgeous. When the plates arrived on the table there was always this moment of religious silence when everybody was too focused to taste those absolutely gorgeous dishes.
&lt;img src=&#34;../../../../img/socratesfr-8.jpeg&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;It’s always great to meet the other people of the international community of Software Craftsmanship. It’s an absolutely open, welcoming, friendly, warm group of great people.
As always I learned so much stuff, but maybe the most important is the amount of energy and strength that I always bring with me after this gathering. If you have never participated, please, join us in one of the next ones. You won’t regret it, and it will become kind of addiction too.
Thanks to the excellent &lt;a href=&#34;https://medium.com/u/a04341a59930&#34;&gt;Houssam Fakih&lt;/a&gt; for the exceptional organization! And thanks to &lt;a href=&#34;https://twitter.com/Singsalad&#34;&gt;@franzi&lt;/a&gt;, the awesome facilitator of this event!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Global Day of Coderetreat 2016, Sophia Antipolis, France</title>
      <link>http://www.alessandrobaffa.com/2016/10/23/global-day-of-coderetreat-2016-sophia-antipolis-france/</link>
      <pubDate>Sun, 23 Oct 2016 12:29:46 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/10/23/global-day-of-coderetreat-2016-sophia-antipolis-france/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../../../../img/coderetreat-1.jpeg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;We did it! The Global Day of Coderetreat in Sophia Antipolis has been a great success! My first coderetreat ever, and I played the role of the organizer and facilitator.
It’s an event that I started to organize in August and I have been lucky to find the support of the &lt;a href=&#34;http://unice.fr/en&#34;&gt;University of Nice-Sophia Antipolis&lt;/a&gt; and my company, &lt;a href=&#34;http://www.amadeus.com/web/amadeus/en_1A-corporate/Amadeus-Home/1319560218660-Page-AMAD_HomePpal&#34;&gt;Amadeus IT Group&lt;/a&gt;. In the organization of all this I have been hugely helped by other people who have been facilitators with me (we were 3 facilitators, 1 host and 2 facilitators/helpers).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/coderetreat-2.jpeg&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-we-did&#34;&gt;What we did&lt;/h2&gt;

&lt;p&gt;We started at 9am with the breakfast and at 9:30 I did the introduction of the day describing the day and showing the slide prepared by the global organizers (who have been really awesome giving us all the necessary material). There were 36 people (over 45 registered). Some of them were students of the university, other ones people from my company and other ones people working in the area.&lt;/p&gt;

&lt;h3 id=&#34;the-check-in&#34;&gt;The check-in&lt;/h3&gt;

&lt;p&gt;We used Eventbrite for the registration so their mobile app for the check-int. We asked the participants to put some stickers on their t-shirts with: name, favorite programming languages, their level of knowledge of TDD &lt;em&gt;(0=”don’t know what it is, but I want to try” … 4=”I am a TDD Jedi”)&lt;/em&gt;. The idea was to ease the making of the pairs, useful with so many people.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/coderetreat-3.jpeg&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-sessions&#34;&gt;The sessions&lt;/h3&gt;

&lt;p&gt;At 10am we started with the sessions. After each of them we made a 10 minutes retrospective where we were all in a circle we tried to use the technique of the ball: only the person who has it can speak. Turned out that we were spending too much time finding the next person who wanted to talk, so we used this technique only for the first session and then we stopped. For all the other ones we stayed all in a circle and everybody had to speak for very few seconds.
And now the sessions.&lt;/p&gt;

&lt;p&gt;1.: &lt;strong&gt;no constraints&lt;/strong&gt;. We left people to familiarize with the exercise without any particular constraint (but for being in pair). We saw that quite few people didn’t have a working testing framework and other ones either an IDE (mostly students). That’s how we decided what to assign for the second session.&lt;/p&gt;

&lt;p&gt;2.: &lt;strong&gt;TDD, ping-pong pairing, use IDE and a build system&lt;/strong&gt;. During the check-in we actually asked people to write their level of knowledge of TDD (from 0 to 4) and stick it on their t-shirts, and for this session we asked to everyone to pair with someone who was more familiar with this technique. This way people who were not familiar with testing and IDE got introduced to them and got something working pretty quickly. For some people this set-up took quite some time and few pairs started to focus on the exercise pretty late in the session. Other ones instead didn’t have any issue at all.
But still, because of this problems we decide to stick with this constraint and continue with it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/coderetreat-4.jpeg&#34;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lunch for 1h30.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.: &lt;strong&gt;same constraints as session #2&lt;/strong&gt; + rules of simple design and 1 constraint of their choice on top of it. Actually we also had a list of constraints that people could choose from, in case they felt particularly brave :-). So, in this session we didn’t give any mandatory one, but we let those who had problems with the set-up to continue, while we said to the others to pick a new one of their choice.
It turned out it was a good idea. At the end of this session basically everybody was up and running, way more confident and really happy about ping-pair programming and curious about TDD.&lt;/p&gt;

&lt;p&gt;4.: &lt;strong&gt;no mouse and no more than 4 lines of code&lt;/strong&gt; per function. People had lot of fun with this one, and for the only person who was using Vim we put another constraint: silent pairing (but to tell the other person the shortcuts). Quite difficult for them, but the retrospective was funny :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/coderetreat-5.jpeg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;5.: &lt;strong&gt;only one additional level of indentation per function&lt;/strong&gt;. This was the most difficult session of the day, basically. The good thing is that everybody at this point was very comfortable with experimenting and nobody was basically afraid to try things. So, this session was interesting because we, as facilitators, received interesting questions regarding the meaning of this constraint, the differences between one language to another, and other interesting point of views.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/coderetreat-6.jpeg&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-went-well&#34;&gt;What went well&lt;/h3&gt;

&lt;p&gt;Basically: everything! It’s been way better than expected. All the participants got very well the spirit of the day: learning by going out of their comfort zones. And they really did! In each retrospective almost everybody was willing to try a new programming language in the next session (Elm has been the most successful one :D), a lot of people discovered Test-Driven Development for the first time and they were very happy to continue using it. Other ones discovered pair programming and they loved to be with another person discussing about design and coding. Also the fact to delete the code at the end of each session was not a problem, instead it was the contrary: some of them were pretty happy about the feeling and they said to be willing to continue to do code katas on their own with this format.&lt;/p&gt;

&lt;p&gt;In the closing circle everybody had something to be very happy about. We could really see the excitement in their eyes and we hope they will keep this spirit also after this event. Basically everybody asked us to do another coderetreat next month :) …. Why not? :)&lt;/p&gt;

&lt;h3 id=&#34;what-i-learned&#34;&gt;What I learned&lt;/h3&gt;

&lt;p&gt;I learned that these kind of events should be done more frequently, because there are many people who really want them.
I learned that, as facilitator, you have to be prepared to handle every kind of personality and each of them needs different kind of help.
I learned that there’s no way to escape croissants for breakfast in France :)
I learned that the most important thing is to make people comfortable. It’s only when they feel good and safe that they unleash their potential.
I learned (actually, just a confirmation) that Software Craftsmanship is a mindset that influences every aspect of your life. And being inclusive, open, helpful and kind are on the top of the list.
I got confirmed again that I absolutely have to learn functional programming :)&lt;/p&gt;

&lt;h3 id=&#34;video-and-photos&#34;&gt;Video and photos&lt;/h3&gt;

&lt;p&gt;This is a short video of the event:
&lt;iframe src=&#34;https://player.vimeo.com/video/188463180&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;and this is the photo album:
&lt;a href=&#34;https://goo.gl/photos/T9VJT1GtLudEq63D9&#34;&gt;https://goo.gl/photos/T9VJT1GtLudEq63D9&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dependency Injection VS Extract and Override Factory Method</title>
      <link>http://www.alessandrobaffa.com/2016/10/09/dependency-injection-vs-extract-and-override-factory-method/</link>
      <pubDate>Sun, 09 Oct 2016 21:17:23 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/10/09/dependency-injection-vs-extract-and-override-factory-method/</guid>
      <description>

&lt;p&gt;The TextConverter exercise (in the &lt;em&gt;Racing&lt;/em&gt; &lt;em&gt;Car&lt;/em&gt; &lt;em&gt;kata&lt;/em&gt; suite) is a very interesting exercise for refactoring legacy code. As I am reading &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt; I found two ways of solving it.&lt;/p&gt;

&lt;p&gt;Refactoring can only be done safely with unit tests and so I did, rigourously in TDD. Though, in this blog post I am not going to show you all the testing process, but only the two ways of decoupling the dependency.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;The code comes with a classic dependency issue: a method that &lt;em&gt;secretly&lt;/em&gt; (from the point of view of the client) reads from an external file that is created using the filename passed in the constructor.
So, no way for the client to know about this file before or to avoid its usage. Here the original code:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/f1f7e91dba6c6252d1237381da856645.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;As you can see, the filename &amp;ldquo;&lt;em&gt;fullFilenameWithPath&lt;/em&gt;&amp;rdquo; is passed in the constructor and then it&amp;rsquo;s used internally by &lt;em&gt;FileReader&lt;/em&gt;. This creates an annoying hidden dependency that prevents the testing of the method &lt;em&gt;convertToHtml()&lt;/em&gt;. If you try to call the method &lt;em&gt;convertToHtml()&lt;/em&gt; from your tests you will get a &amp;ldquo;&lt;em&gt;File Not Found Exception&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s leave aside that ugly mix of levels of abstractions in this method (&lt;em&gt;FileReader&lt;/em&gt;, &lt;em&gt;BufferedReader&lt;/em&gt;, &lt;em&gt;&amp;lt; br /&amp;gt;&lt;/em&gt;, static call to &lt;em&gt;escapeHtml()&lt;/em&gt; all together .. &lt;em&gt;blah&lt;/em&gt;). I found that this will be fixed almost &lt;em&gt;automagically&lt;/em&gt; once you figure out how to extract that dependency from there.&lt;/p&gt;

&lt;p&gt;So, how to extract that dependency so that we can test it?&lt;/p&gt;

&lt;h2 id=&#34;technique-1-dependency-injection&#34;&gt;Technique 1: Dependency Injection&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An injection is the passing of a dependency to a dependent object (a client) that would use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this case the dependency is &lt;em&gt;FileReader&lt;/em&gt; and the dependent object is our &lt;em&gt;HtmlTextConverter&lt;/em&gt; class.&lt;/p&gt;

&lt;p&gt;I want to pass the dependency from the constructor, but we can&amp;rsquo;t change the existing one. In &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt; this is called &lt;em&gt;Preserving Signature&lt;/em&gt;, but more easily we can&amp;rsquo;t change an API that is used by the clients.&lt;/p&gt;

&lt;p&gt;So, I can refactor this class in 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I extract the &lt;em&gt;new FileReader&lt;/em&gt; from the method so that now it is created by a ReaderFactory (I am using the &lt;a href=&#34;https://sourcemaking.com/design_patterns/factory_method&#34;&gt;Factory Design Pattern&lt;/a&gt; here, so that I can create a FileReader, or more in general a Reader, with a method &lt;em&gt;createFactory()&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;I create a new constructor that takes a &lt;em&gt;ReaderFactory&lt;/em&gt; interface as input&lt;/li&gt;
&lt;li&gt;I make the old constructor to call the new one passing the implementation of &lt;em&gt;ReaderFactory&lt;/em&gt; that does the same job of &lt;em&gt;new FileReader()&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The point 3 is called &lt;em&gt;Parametrize Constructor&lt;/em&gt; in &lt;em&gt;Working Effectively With Legacy Code&lt;/em&gt; and this is the result:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/b4e9323e3b692cb6de63efa1c08fa41d.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The fact that I extracted the &lt;em&gt;FileReader&lt;/em&gt; from the method allowed me also to better define how I wanted to use it, so to get rid of &lt;em&gt;BufferedReader&lt;/em&gt;, now handled in HtmlFormatter class. This allowed me also to remove the global variable fullFilenameWithPath from HtmlTextConverter.
 A simple refactoring that made me, at the same time, decouple the dependency and make the code cleaner by removing that ugly mix of levels of abstractions.&lt;/p&gt;

&lt;p&gt;With this implementation I can now test the method just by creating a fake implementation of ReaderFactory in order to read from a String instead of a file:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/35267e8d83a380d4ec071faf95cc356c.js&#34;&gt;&lt;/script&gt;


&lt;h2 id=&#34;technique-2-extract-and-override-factory-method&#34;&gt;Technique 2: Extract and Override Factory Method&lt;/h2&gt;

&lt;p&gt;In this technique you extract all the work involved in the creation of &lt;em&gt;FileReader&lt;/em&gt; in the constructor into another factory method. Then, you create a testing subclass and override the method. This is the result:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/f1e01dcfa82737091ff430fb40932d51.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I have extracted the &lt;em&gt;new FileReader()&lt;/em&gt; into another method called &lt;em&gt;getReader()&lt;/em&gt;, so now I can override it in a subclass called &lt;em&gt;FakeHtmlTextConverter&lt;/em&gt; as follows:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/b823ce0137a2b01b60873741fe19b68c.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This technique allows me to not change the constructor, but instead using a fake implementation in the tests, like so:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/73fa748312c3cda72fad659d698d1203.js&#34;&gt;&lt;/script&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Working Effectively With Legacy Code&lt;/em&gt; is an illuminating book and i strongly recommend it to read. It&amp;rsquo;s pretty dense with content, but reading it along with small exercise like this one it&amp;rsquo;s a great way to absorb it faster and make it yours.&lt;/p&gt;

&lt;p&gt;This exercise is interesting and puts you a bit uncomfortable since the refactoring is becomes pretty big very quickly and it&amp;rsquo;s difficult to do it in small steps. You stay in the red zone (&lt;em&gt;test don&amp;rsquo;t pass&lt;/em&gt;) for long, at least the first time you do it and mostly if you&amp;rsquo;re not familiar with design patterns or any refactoring strategy in particular.&lt;/p&gt;

&lt;p&gt;Regarding the techniques, the 2. is strongly linked to the programming language used. You can&amp;rsquo;t use it in C/C++. The 1. is more clean. Both are two great ones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Can You Say You’re A Software Crafts(wo)man?</title>
      <link>http://www.alessandrobaffa.com/2016/08/06/how-can-you-say-youre-a-software-craftswoman/</link>
      <pubDate>Sat, 06 Aug 2016 12:29:46 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/08/06/how-can-you-say-youre-a-software-craftswoman/</guid>
      <description>

&lt;p&gt;This is a question that came up yesterday during our latest meetup with our local &lt;a href=&#34;http://www.meetup.com/French-Riviera-Software-Craftsmanship-Community&#34;&gt;French Riviera Software Craftsmanship Community&lt;/a&gt; (note: a very nice round table session &lt;a href=&#34;http://www.meetup.com/French-Riviera-Software-Craftsmanship-Community/events/232721703/&#34;&gt;on the beach&lt;/a&gt; of Juan Les Pins ).
This post is my answer to this question.&lt;/p&gt;

&lt;h2 id=&#34;what-software-craftsmanship-is-not&#34;&gt;What Software Craftsmanship is not&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;It’s not an elitist club&lt;/strong&gt; of people who think to hold the truth of how to write the perfect code. This is an important aspect because it is related to how much inclusive or exclusive a group of people is (and also to how much nice people are). I’ve been following the international Software Craftsmanship movement since some time now and I met some of them during &lt;a href=&#34;https://medium.com/alebaffa-blog/a-community-of-professionals-socrates-uk-927fd0bb85f4&#34;&gt;SoCraTes UK&lt;/a&gt; and I learned how much important are things like kindness, mentorship and empathy for a Software Crafts(wo)man. Software development is not only techniques and programming: it’s also relationship and communication with your peers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s not a certification&lt;/strong&gt; of one’s capabilities to write good software (assuming it does exist really). A person yesterday was doubtful whether he could call himself a software craftsman or not because he is not working in TDD or applying all the time the SOLID principles.
These are technicalities, very important ones, but they are just tools that a person who cares about what he does can use or not in his daily job.
It’s not in conflict with the Agile movement. Software Craftsmanship is focused a lot more on technical practices and writing quality software, but the goal is always the same: deliver values for the customer. The only difference is that Software Craftsmanship is more focused on you as a person. For a Software Crafts(wo)man adding value for the customer passes through a constant personal improvement and a willing to help the team to improve as well.
Agile and Craftsmanship share the same focus on the importance of communication, collaboration, relationship and empathy. They are two sides of the same coin (unfortunately they are still being perceived as mutually-exclusive, while they’re not. But it’s changing1).&lt;/p&gt;

&lt;h2 id=&#34;what-software-craftsmanship-is&#34;&gt;What Software Craftsmanship is&lt;/h2&gt;

&lt;p&gt;It is a set of values that you embrace and you decide to follow for the rest of your life, not only your professional career. I remember when I first read the book &lt;a href=&#34;https://www.amazon.com/Software-Craftsman-Professionalism-Pragmatism-Robert/dp/0134052501&#34;&gt;The Software Craftsman&lt;/a&gt;, by Sandro Mancuso, and I saw &lt;a href=&#34;https://www.youtube.com/watch?v=9OhXqBlCmrM&#34;&gt;one of his talks&lt;/a&gt;, and I said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Wow, that’s it! This is what I was looking for. This is the path I want to follow. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What are these values that make you a Software Crafts(wo)man? I will try to list what I think they are the most important for me.&lt;/p&gt;

&lt;h2 id=&#34;continuous-improvement&#34;&gt;Continuous improvement&lt;/h2&gt;

&lt;p&gt;It’s not because a Software Crafts(wo)man is a geek and so he/she has the need to try the latest technologies. It’s rather because he/she wants to pragmatically find new ways to add value to what he/she does every day. And the only way is to improve our skills by practicing, reading books, meeting people, going to conferences etc. Improving means also to learn and to be open to technologies and techniques in order to evaluate them with rationality, pragmatism and no prejudice.&lt;/p&gt;

&lt;p&gt;I always make the link between continuous improvement and the second value of the Software Craftsmanship Manifesto:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not only responding to change, but also steadily adding value&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe the best metaphor to describe continuous improvement is the journey towards mastery. A Software Crafts(wo)man is a journey man, he/she’s not the master who is arrived at destination (is there one, by the way?). The journey is something that everybody can take, regardless of how fast he/she can walk.&lt;/p&gt;

&lt;h2 id=&#34;the-idea-of-professionalism&#34;&gt;The idea of Professionalism&lt;/h2&gt;

&lt;p&gt;It was illuminating to me to start to think of my employer as my client. This can sound so trivial for self-employed people, but it’s not so for those who have been hired by a company. Professionalism means that you always strive to be better because you want to add value to what you do and to constantly deliver quality, pragmatically. This includes continuous improvement.&lt;/p&gt;

&lt;h2 id=&#34;mentorship-help-others-to-improve&#34;&gt;Mentorship: help others to improve&lt;/h2&gt;

&lt;p&gt;A Software Crafts(wo)man not only improves himself, but also he love to help others to improve their skills, both technical and soft ones.&lt;/p&gt;

&lt;h2 id=&#34;social-aspects-of-software-development&#34;&gt;Social aspects of Software Development&lt;/h2&gt;

&lt;p&gt;A Software Crafts(wo)man cares about the team and his/her peers. The social aspects of software development are being maybe the most important ones during SoCraTes UK. How to motivate people, how to be inclusive and not exclusive at a personal level and at team level, how to help a team or a colleague to unleash its potential .. these are things that a Software Crafts(wo)man cares about.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;As you see I didn’t talk about technologies. I didn’t talk about Test-Driven Development neither Docker, nor the latest programming languages. Technologies and techniques are tools that a Software Crafts(wo)man needs to know and practice, but they are not the only things and it’s not important to be Bill Gates or Mark Zuckerberg to be a Software Crafts(wo)man. It’s not about how good you are, it’s all about values, willing to improve yourself and help others. It’s about taking your journey towards mastery and start to walk at your own speed.
If you believe and if you want to embrace the values I mentioned in this post, or if you are already following them, you are already a Software Crafts(wo)man. Or whatever other definition you like to use.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(If you want to read more stories about Software Craftsmanship, subscribe to the &lt;a href=&#34;https://scnewsletter.firebaseapp.com/&#34;&gt;Software Craftsmanship Newsletter&lt;/a&gt; and join the &lt;a href=&#34;http://slack.softwarecraftsmanship.org/&#34;&gt;International Community on Slack&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transformation Priority Premise: overcome the fear of new tests</title>
      <link>http://www.alessandrobaffa.com/2016/07/05/transformation-priority-premise-overcome-the-fear-of-new-tests/</link>
      <pubDate>Tue, 05 Jul 2016 21:29:11 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/07/05/transformation-priority-premise-overcome-the-fear-of-new-tests/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&#34;&gt;The Transformation Priority Premise&lt;/a&gt; (TPP) is a great empirical list of transformations that you can apply in your code when you’re working in TDD:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/tpp.png&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;when-do-you-need-it&#34;&gt;When do you need it?&lt;/h2&gt;

&lt;p&gt;Practicing with TDD I realized that sometimes I reach a point when I get stuck: I am almost scared to add a new particular test because I already know it’s going to force me to completely rewrite the structure of the code.
The problem is that the more particular tests you add, the more generic your code has to become to handle all of them.&lt;/p&gt;

&lt;p&gt;TPP comes in handy at this point. When you feel you’re stuck, take a look at your code and start from the top of this list to see if there are some transformations that you can apply.&lt;/p&gt;

&lt;p&gt;Apply them even if you don’t see clearly how they will unblock you: the code itself will light up the path to follow.&lt;/p&gt;

&lt;h2 id=&#34;an-example-the-roman-numeral-kata&#34;&gt;An example: the Roman Numeral Kata&lt;/h2&gt;

&lt;p&gt;Inspired by the solution published by Codurance, I tried to practice with TPP using the same kata in Java. I made it several times and every time taking a look to the TPP list in order to see how I could use it.&lt;/p&gt;

&lt;p&gt;In few occasions I got stuck with the algorithm and just by applying one of the items in the list, the code itself suggested me how to proceed.
Let’s see few examples.&lt;/p&gt;

&lt;p&gt;At this point the code was handling only the case for 1, 2 and 3.
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/6944a3e84f7672505e11f3aa43dcd040.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Now I wanted to add the new test to handle 4. So, in TDD you start by doing the easiest thing, so I added a new element “IV” in the array. Tests pass.
At this point you clearly see the duplication of the string “I” and so I said “_OK, time to refactor_”. Well, how?&lt;/p&gt;

&lt;p&gt;So, I took the TPP list and the transformation 8) is (array -&amp;gt; container). So, I transformed the array to a collection that could be used as a dictionary:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/440d85e947fef253405fe45a6b144992.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Now let’s keep only “I” and “IV” from the collection and let’s see if there’s another transformation I can use.
Uhm, my method has only a return, so the transformation 9) (statement -&amp;gt; recursion) looks promising. I have now a collection that may have some useful methods I can take advantage from…let’s try:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/a692a3e1608c69c9a52db39db988a7b5.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Nice. Having a collection helped me to find an option that I wasn’t considering before.&lt;/p&gt;

&lt;h2 id=&#34;another-example&#34;&gt;Another example&lt;/h2&gt;

&lt;p&gt;At some point I had a lot of if statements:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/6fd459d1f2049fa70fc0f7db9b8fc717.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;The TPP(10) says (if -&amp;gt; while). So, I changed the code accordingly:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/ecb93847173129f279ff5de6ca8677dd.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;At this point the repetition is really visible. A lot of while statements doing the same things with a decreasing value in the condition. It looks like something that begs to be refactored again using recursion, and so here it is:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/a9111713ec0e3b6f6647e5ab6af6d4f1.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Transformation Priority Premise is really helpful. It’s a handy list of changes that you can apply easily and with no damage every time you are stuck or you don’t know how to make your code more generic.&lt;/p&gt;

&lt;h1 id=&#34;title&#34;&gt;Title&lt;/h1&gt;

&lt;p&gt;I am going to do again some code kata I already done using this technique.&lt;/p&gt;

&lt;p&gt;If you’re curious, you can see all the steps I’ve done in my implementation on &lt;a href=&#34;https://github.com/alebaffa/codekata/commits/master/src&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Practicing TDD: FizzBuzz kata in Golang</title>
      <link>http://www.alessandrobaffa.com/2016/06/19/practicing-tdd-fizzbuzz-kata-in-golang/</link>
      <pubDate>Sun, 19 Jun 2016 21:28:49 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/06/19/practicing-tdd-fizzbuzz-kata-in-golang/</guid>
      <description>&lt;p&gt;My implementation:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/4c32900a8ac8bd9793f44ddeaa3f3ce1.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;and here the list of all the steps that I’ve done to implement it in TDD on &lt;a href=&#34;https://github.com/alebaffa/codekata/commits/master/fizzbuzz&#34;&gt;my github account&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Community of Professionals - SoCraTes UK</title>
      <link>http://www.alessandrobaffa.com/2016/06/19/a-community-of-professionals---socrates-uk/</link>
      <pubDate>Sun, 19 Jun 2016 21:28:33 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/06/19/a-community-of-professionals---socrates-uk/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../../../img/socrates.png&#34; alt=&#34;socrates place&#34; style=&#34;width: 300px; margin-right: 15px;&#34; align=&#34;left&#34;/&gt;&lt;/p&gt;

&lt;p&gt;A couple of weeks ago I participated for the first time to a SoCraTes event, one of the Software Craftsmanship international gatherings.
SoCraTes (Software Craftsmanship and Testing) is an self-organized conference where the people from the international Software Craftsmanship Community meet and spend 3 days organizing themselves activities and talks around everything related to software craftsmanship: from the technical to the human aspects of it.
There are few events of this kind every year (Italy, France, Germany, Belgium, Switzerland, Romania, Finland, Canaries) and I participated to the one in UK.&lt;/p&gt;

&lt;h2&gt;Location&lt;/h2&gt;

&lt;p&gt;The location was in Dorking, not far from Gatwick airport. A stunning place!
&lt;img src=&#34;../../../../img/socrates-out-1.jpeg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Organization — The Open Space&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s a self-organizing conference because the agenda is created every day by the participants through an Open Space. These were the market places of the two days (the third and last day was dedicated more to relax, chat and walk until people left).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/open-space-1.jpeg&#34; style=&#34;width: 400px; margin-right: 2px;&#34; align=&#34;left&#34; /&gt;
&lt;img src=&#34;../../../../img/open-space-2.jpeg&#34; style=&#34;width: 400px;&#34; align=&#34;left&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Personal experience&lt;/h2&gt;
It’s been maybe one of the most stimulating experiences I’ve ever participated to.&lt;/p&gt;

&lt;p&gt;Through the sessions in the event I really understood the meaning of Software Craftsmanship. I attended technical sessions about refactoring legacy code, TDD and functional programming, as well as other sessions related more to the human aspects of software development like Agile, technical coaching, Community of Practice, communication techniques and interesting comparisons between sport and development.&lt;/p&gt;

&lt;p&gt;Differently from a traditional conference, in the SoCraTes events the session are fully interactive and once they start they may also never really end: if people are interested they continue to work on it during the evening and the other days. The sessions organized during the event may also continue after the event itself, so starting cool open source projects that the entire community will one day benefit from. And it will happen very often, as far as I understood. And it’s so cool.&lt;/p&gt;

&lt;p&gt;The Software Craftsmanship international community is really awesome: friendly, open and welcoming people who meet in these events to share their passion, to discuss and challenge themselves and to help others to learn how to craft their careers and their skills.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;What I learned&lt;/h2&gt;
The biggest lesson for me that I learned from SoCraTes UK is to realize that software is about people and that too often our industry forgets about it.&lt;/p&gt;

&lt;p&gt;It’s not that I’ve never thought about empathy, diversity, inclusion and all these stuff, but meeting with a community of passionate people who put these things before the technicalities of software development (when they could fully do it considered their high technical skills) made me realize that maybe I’ve never put the right amount of focus on them.&lt;/p&gt;

&lt;p&gt;Software Craftsmanship is care about our industry and this includes everything, from the techniques it is based on to the people who work in it.&lt;/p&gt;

&lt;p&gt;It’s been my first SoCraTes event ever, but I will surely participate to the other ones as often as I can. The one in France is not so far from my house so I will surely go there!&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;If you want to get a glimpse of what SoCraTes UK was, register to the &lt;a href=&#34;https://scnewsletter.firebaseapp.com/&#34;&gt;Software Craftsmanship Newsletter&lt;/a&gt; that I created: the next issue will be fully dedicated to this events.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First try with concurrency in Go</title>
      <link>http://www.alessandrobaffa.com/2016/05/16/first-try-with-concurrency-in-go/</link>
      <pubDate>Mon, 16 May 2016 21:04:53 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/05/16/first-try-with-concurrency-in-go/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while I&amp;rsquo;m practicing with Go, but I had still never tried its concurrency features so far. My bad.&lt;/p&gt;

&lt;p&gt;Fortunately &lt;a href=&#34;http://exercism.io&#34;&gt;exercism.io&lt;/a&gt; has just introduced me to this topic with the exercise &lt;a href=&#34;http://exercism.io/exercises/go/parallel-letter-frequency/readme&#34;&gt;&amp;ldquo;Parallel Letter Frequency&amp;rdquo; exercise&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The core of my solution is here (I let you read the comments).&lt;/p&gt;

&lt;p&gt;Basically the exercise asks you to count the frequency of the letters in 3 different strings. They provide you with already a function that counts the frequency, but you are asked to call that function with 3 calls in parallel (one call for each string) and to collect the result (the total frequencies from all the 3 strings).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Frequency(s string) map[rune]int {
  //DO SOMETHING
}
func ConcurrentFrequency(words []string) map[rune]int {
  // (buffered)channel if type map[run]int with capacity of the lenght of the input (3)
	channel := make(chan map[rune]int, len(words))

	for _, value := range words {
		// anonymous function that calls Frequency() 3 times in parallel
		// and puts the three different results in the channel of capacity 3
		go func(v string){
			channel &amp;lt;- Frequency(v)
		}(value)
	}

  // Now use the values inside the channel.
  frequency := map[rune]int
	// loops 3 times because channel of size 3
	for range words {
		for key, value := range &amp;lt;-channel {
			frequency[key] += value
		}
	}
  return frequency
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this solution I am basically looping over the array of strings in input and call the Frequency() function on every iteration. The interesting thing is here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;go func(v string){
  channel &amp;lt;- Frequency(v)
}(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I&amp;rsquo;m starting a &lt;strong&gt;goroutine&lt;/strong&gt; on an &lt;strong&gt;anonymous function&lt;/strong&gt; (the &lt;em&gt;go&lt;/em&gt; prefix before &lt;em&gt;func&lt;/em&gt;) inside of which I call Frequency(). The Frequency function sends its returned value in a &lt;strong&gt;channel&lt;/strong&gt; (of the same type returned from the function). The channel is the way goroutines communicates with each other and so it&amp;rsquo;s also the way to send values back.&lt;/p&gt;

&lt;p&gt;Once the channel contains the returned values, you can loop over the channel itself (not sure here if it&amp;rsquo;s because it&amp;rsquo;s a &lt;em&gt;buffered channel&lt;/em&gt; and so with a specified capacity or I can do this every time, I still have to understand this).
The channel is of type &lt;em&gt;map[rune]int&lt;/em&gt; and so I can fetch &lt;key, value&gt; from it, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for range words {
  for key, value := range &amp;lt;-channel {
    frequency[key] += value
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Working with channels is very simple and powerful. There are plenty of things that I still have to learn, but this was a good start. &lt;strong&gt;Thanks Exercism.io&lt;/strong&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Paradox Of Choice In Learning to Code</title>
      <link>http://www.alessandrobaffa.com/2016/05/16/the-paradox-of-choice-in-learning-to-code/</link>
      <pubDate>Mon, 16 May 2016 15:37:25 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/05/16/the-paradox-of-choice-in-learning-to-code/</guid>
      <description>

&lt;p&gt;I was talking with a guy some days ago and it went like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;he told me &amp;ldquo;&lt;em&gt;I really would like to start improving myself and I need a pet project..&lt;/em&gt;&amp;ldquo;&lt;/li&gt;
&lt;li&gt;I said &amp;ldquo;&lt;em&gt;great idea! But where do you want to improve?&lt;/em&gt;&amp;ldquo;&lt;/li&gt;
&lt;li&gt;he said &amp;ldquo;&lt;em&gt;..that&amp;rsquo;s the problem: I still don&amp;rsquo;t know what I want to use. There are so many things out there that I would like to learn &amp;hellip; and I don&amp;rsquo;t know where to start&amp;hellip;&lt;/em&gt;&amp;ldquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This made me think about a book I read some time ago called &amp;ldquo;&lt;a href=&#34;http://www.amazon.com/Paradox-Choice-Why-More-Less/dp/149151423X&#34;&gt;The Paradox of Choice: Why More Is Less&lt;/a&gt;&amp;rdquo; (the author gave also an awesome &lt;a href=&#34;https://www.ted.com/talks/barry_schwartz_on_the_paradox_of_choice?language=en&#34;&gt;TED Talk&lt;/a&gt; about it). Basically the book talks about the relationship between the huge amount of choices we have nowadays with our happiness and freedom. People tend to think that having more choices (e.g.: more jeans in the shop to choose from, more books in the library, more courses on a learning platform, etc..) means that we have more &lt;em&gt;freedom&lt;/em&gt;, you are free to choose the thing that is more appropriate for you. The more the things we can choose from, the more free we are.&lt;br /&gt;
The author debunks this myth showing that the fact to have so many different choices doesn&amp;rsquo;t lead people to &lt;em&gt;feel more free&lt;/em&gt;, but instead it leads them to a &lt;em&gt;paralysis&lt;/em&gt; (in their mental choice process) and to a constant feeling of regret: you buy a book and you soon regret to not have bought the other one in your wish list (&amp;rdquo;&lt;em&gt;perhaps it was better&lt;/em&gt;&amp;rdquo;).&lt;br /&gt;
Constant dissatisfaction instead of happiness.&lt;/p&gt;

&lt;p&gt;The same thing is happening nowadays with technology and, more specifically, with programming. There are so many choices out there to choose from that people, like the guy I was talking to, don&amp;rsquo;t know &lt;em&gt;where to start&lt;/em&gt;. Javascript? Well, good luck. AngularJS? Oh wait, which one? &lt;em&gt;Angular 2 is coming&lt;/em&gt;. Java 8? Wait wait, Java 9 is scheduled for next year. Machine Learning? No no, the next &lt;em&gt;big-thing-I-am-sure&lt;/em&gt; will be Server-less architecture. Go, Haskell, Scala, Kotlin, Rust &amp;hellip; and if you want to pick just one platform to learn you can choose among Coursera, HackerRank, TopCoder, EggHead, CodeAcademy, CodeSchool, Udemy, Udacity &amp;hellip;.&lt;br /&gt;
&lt;strong&gt;UNLIMITED-OPTIONS-AVAILABLE&lt;/strong&gt;! The consequence is that people don&amp;rsquo;t know where to start if they try to follow this entropy. &lt;br /&gt;
The bad news is that Software Engineering is a field that changes so rapidly that all these things listed above will change in a couple of years. Again. So, it&amp;rsquo;s time to stop your mental chaos. How?&lt;/p&gt;

&lt;h2 id=&#34;stop-choosing&#34;&gt;Stop choosing&lt;/h2&gt;

&lt;p&gt;The book provides a simple solution to this paralysis: stop choosing. Do not spend mental energy regretting your choice because &lt;em&gt;maybe&lt;/em&gt; the other one could have been better. If the difference is not so relevant (in terms of price, time, etc..) stop feeling bad and start to fully enjoy what you already have. There will be always something absolutely better out there, but what you have is already good enough.&lt;br /&gt;
What does it mean for developers?&lt;/p&gt;

&lt;h2 id=&#34;ask-yourself-the-right-question&#34;&gt;Ask yourself the right question&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s only one way to face the increasing entropy: a solid knowledge of the basics of Software Engineering. Stop choosing the next programming language or technology to learn. The question you should ask yourself should not be &amp;ldquo;&lt;em&gt;should I choose between X and Y?&lt;/em&gt;&amp;rdquo;, but instead it should be &amp;ldquo;&lt;em&gt;What I want to become? A professional developer or a simple coder?&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ask yourself how well do you know things like design patterns, software design, cohesion, coupling, data structures, algorithms&amp;hellip;are you able to have a discussion about these things with other technical people? Do you think to have enough knowledge to decide the good strategies to write clean and testable code?&lt;br /&gt;
If your answer is &lt;em&gt;no&lt;/em&gt; or you&amp;rsquo;re not sure, well you&amp;rsquo;ve narrowed your options. Do a step back, that&amp;rsquo;s where you have to improve. &lt;br /&gt;
Welcome to the 2nd stage of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Four_stages_of_competence&#34;&gt;Four Stages of Competence&lt;/a&gt;: &lt;em&gt;conscious incompetence&lt;/em&gt; (you&amp;rsquo;re not alone, I&amp;rsquo;m there with you!).&lt;/p&gt;

&lt;p&gt;Technologies change every time. Having strong knowledge foundations is what makes the difference between a professional developer and a simple coder.&lt;/p&gt;

&lt;p&gt;Choose one of them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bowling kata in Go</title>
      <link>http://www.alessandrobaffa.com/2016/05/16/bowling-kata-in-go/</link>
      <pubDate>Mon, 16 May 2016 12:10:33 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/05/16/bowling-kata-in-go/</guid>
      <description>&lt;p&gt;This is my solution for the Bowling Kata, written in Go.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/c3a6b863f905f1cc073d6611d3baafe2.js&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>Be careful with slice</title>
      <link>http://www.alessandrobaffa.com/2016/03/31/be-careful-with-slice/</link>
      <pubDate>Thu, 31 Mar 2016 06:56:10 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/03/31/be-careful-with-slice/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/slices&#34;&gt;Slices&lt;/a&gt; are a great tool in Go, but sometimes they can be confused with arrays.
A small reminder: slices are a pointer into an underline array. Let&amp;rsquo;s take this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;array := []int{1, 2, 3, 4, 5, 6}
slice := array[1:3]

// let&#39;s print both
fmt.Println(&amp;quot;array: &amp;quot;, array)
fmt.Println(&amp;quot;slice: &amp;quot;, slice)

// array:  [1 2 3 4 5 6]
// slice: [2 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the slice is only a pointer to the underline array, if you do some operations with the elements of the array you are also changing the elements of the slice. Like this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// let&#39;s double the first element of the array
array[1] *= 2

// let&#39;s print the array and the slice
fmt.Println(&amp;quot;array: &amp;quot;, array)
fmt.Println(&amp;quot;slice: &amp;quot;, slice)

// array:  [1 4 3 4 5 6]
// slice: [4 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A slice have two important properties:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(&amp;quot;length of the slice: &amp;quot;, len(slice))
fmt.Println(&amp;quot;capacity of the slice: &amp;quot;, cap(slice))

// length of the slice: :  2
// capacity of the slice: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The length is the number of elements that the slice contains, while the capacity is the max number of elements it can contain.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to take care of what happens when the slice fulfills its capacity. Let&amp;rsquo;s continue the example by adding new things in the slice (and so in the array):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;middle = append(slice, 100)
middle = append(slice, 101)
middle = append(slice, 102)
middle = append(slice, 103)

// slice:  [4 3 99 100 101 102 103]
// array:  [1 4 3 99 100 101]
// capacity of slice:  10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The array has reached its length (6 elements), but the slice has been extended. It is actually been copied and moved and it became a new slice with double capacity (10. It was 5 before).&lt;/p&gt;

&lt;p&gt;At this point the slice is not pointing anymore to that array. So, now if you do some operations to the underline array, the elements of the slice won&amp;rsquo;t change anymore. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// let&#39;s double the first element of the array
array[1] *= 2

// let&#39;s print the array and the slice now:
fmt.Println(&amp;quot;array: &amp;quot;, array)
fmt.Println(&amp;quot;slice: &amp;quot;, slice)

//array:  [1 8 3 99 100 101]
//slice:  [4 3 99 100 101 102 103]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the &lt;em&gt;array[1] = 8&lt;/em&gt;, but the corresponding element in the slice is still 4.&lt;/p&gt;

&lt;p&gt;This is an important thing to take care of when you&amp;rsquo;re using slices. It can be really confusing. Always take care of the capacity in case your program is managing a lot of elements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Surrounding yourself with the right people</title>
      <link>http://www.alessandrobaffa.com/2016/02/23/surrounding-yourself-with-the-right-people/</link>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/02/23/surrounding-yourself-with-the-right-people/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../../../img/cerini.jpeg&#34; alt=&#34;alt text&#34; title=&#34;passion&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I was 8 years old when I started playing guitar. It was not my choice, though, but my parents’ who forced me to start taking some lessons. I hated it at the beginning: hours of solfège, and I wasn’t even able to play the most stupid song. No chords, nothing at all.&lt;/p&gt;

&lt;p&gt;Nevertheless I had some natural talent for music (I’m gifted with the so called musical ear. And so my brother and sister are - the Force is strong in my family), and maybe my parents knew that and that’s why they persisted so much with me.&lt;/p&gt;

&lt;p&gt;Time passed and I learned chords and arpeggios. I actually became so good until the point where my teacher told me that I was his most successful student ever, and he didn’t have anything more to teach me. He suggested me to go to the conservatory, but it was too much of an engagement both for me and for my parents and so I quite taking lessons.
I remember I felt relieved. No more lessons, no more waste of my precious time (1 hour / week &amp;hellip;). I could spend that hour playing football with my friends. So I quit playing guitar in general.
I was 11.&lt;/p&gt;

&lt;p&gt;I didn’t touch my guitar for about 7 years, until a summer when I made a new friend. He was (he still is) an extraordinary guitarist, and he was able to reproduce all the songs he knew just listening to them for few minutes. He was always the coolest guy of the party. And he was/is also an extremely nice and funny guy. I loved the way he played his guitar, and his passion was so contagious that he made me willing to take mine and start playing again. During those few weeks my passion came back with all its strength. I started to learn new chords, find new ones and I soon realized that I was not so bad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My passion was driving me to a new level of consciousness&lt;/strong&gt; and I found some things to be easier than I thought years before. &lt;strong&gt;My friend’s passion has triggered mine&lt;/strong&gt;. I’ve been playing guitar no-stop for years since then, and I improved so much. I own two guitars now.&lt;/p&gt;

&lt;p&gt;I also love photography. I started to take photos when I first came here in south of France from Italy. The scenery was beautiful and so I thought to buy my first DSLR (a Nikon D70s). When I started using it I was very bad, I wasn’t even able to take a good photo in normal conditions and all those gears were difficult to manage. After some months with no improvements I gave up. I didn’t use my Nikon for about a year until I registered to an &lt;a href=&#34;http://kelbyone.com/&#34;&gt;online course&lt;/a&gt; where I discovered the post-processing. I was hooked. I discovered a new entire world of possibilities and so I started to improve my photos in order to apply all those cools things I was looking on the web. Then I tried &lt;a href=&#34;http://strobist.blogspot.fr/2011/01/introducing-strobist-lighting-in-layers.html&#34;&gt;another one&lt;/a&gt;, and in one year I hugely improved my skills and now &lt;a href=&#34;https://www.flickr.com/photos/alebaffa/&#34;&gt;I’m not so bad&lt;/a&gt;. Again, something that has brought my passion back to me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Surrounding yourself with passion and optimism is one of the best things you can do to improve yourself and your environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s the reason why I started to go to conferences: once back home you’re so full of enthusiasm that you restart whatever you do with a new energy.
It’s the reason why I started to co-organize a &lt;a href=&#34;http://www.meetup.com/French-Riviera-Software-Craftsmanship-Community/&#34;&gt;local Meetup&lt;/a&gt;.
It’s also the reason why I like being a developer advocate, because I meet and work with so many passionate people who trigger my passion and pro-activity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being surrounded by passionate people can speed up your learning process by giving you that amount of motivation that you sometime may lose on your way.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Things to consider before open sourcing your project written in go</title>
      <link>http://www.alessandrobaffa.com/2015/11/26/things-to-consider-before-open-sourcing-your-project-written-in-go/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2015/11/26/things-to-consider-before-open-sourcing-your-project-written-in-go/</guid>
      <description>

&lt;p&gt;so, you want to finally release your &lt;em&gt;preciousss&lt;/em&gt; written in Go to the open source community. Great! And thank you.
Though, there are few things you may want to consider before doing the big step. Things that you may have missed perhaps because you are not yet 100% comfortable with Go (but “_I will improve later. Now let me just put this gem on Github._”).
You have to know that the Go community can be quite strict when it comes to its idioms and conventions. And they are right, in my opinion. So, in order to avoid hundred of issues and pull requests on Github focused mainly on code style and best practices, and not on the real core of your project, check these following few things before pushing your code.&lt;/p&gt;

&lt;h2 id=&#34;be-sure-you-read-effective-go&#34;&gt;Be sure you read Effective Go&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt; contains all the tips you need to know in order to write clear and idiomatic Go code. You will learn all the best practices and the conventions used and followed by the Go community.
Effective Go is essential not only for newbies programmers, but also (and foremost) for those coming from other programming languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A straightforward translation of a C++ or Java program into Go is unlikely to produce a satisfactory result — Java programs are written in Java, not Go.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;avoid-common-mistakes&#34;&gt;Avoid common mistakes&lt;/h2&gt;

&lt;p&gt;The Go community over the years has identified some common mistakes made in Go projects, and so common comments in the code reviews. These comments are now collected in the &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;Go Code Review Comments&lt;/a&gt; page.
Be sure not to make these common mistakes yourself, so give a read to that page.&lt;/p&gt;

&lt;h2 id=&#34;use-all-the-tools&#34;&gt;Use all the tools&lt;/h2&gt;

&lt;p&gt;Go comes with some amazing tools that allow you to write idiomatic Go with less effort. Be sure to check all your code with, at least, these few ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;gofmt&lt;/a&gt;: to automatically formats Go source code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;golint&lt;/a&gt;: to print out code style mistakes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/cmd/vet/&#34;&gt;govet&lt;/a&gt;: to examine the code and report suspicious constructs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only by using at least these 3 tools you can manage to write clear and idiomatic Go code and avoid a lot of issues and pull requests. And they also help you to learn Go in the proper way :) .
&lt;strong&gt;Good news&lt;/strong&gt;. The Go community is so good that there are plugins for the most used IDE: &lt;a href=&#34;https://github.com/DisposaBoy/GoSublime&#34;&gt;GoSublime&lt;/a&gt; and the &lt;a href=&#34;https://forum.golangbridge.org/t/beta-testers-wanted-sublimetext-go/1282&#34;&gt;official Google plugin&lt;/a&gt; (in test) for SublimeText, &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;GoPlus&lt;/a&gt; for Atom, &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; for Vim and, incredibly enough, VisualStudio has a lot of good reviews for Go.
There are a lot of other IDE, but these ones, apparently, are the most used ones by the community.&lt;/p&gt;

&lt;h2 id=&#34;stay-up-to-date-with-the-go-development&#34;&gt;Stay up-to-date with the Go development&lt;/h2&gt;

&lt;p&gt;If you are open sourcing a Go project chances are that you may be impacted by changes in the Go libraries, or whatever can happen with the development of Go in general. It’s better to stay up-to-date with what happens and follow the discussions on these Google Groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/golang-dev&#34;&gt;golang-dev&lt;/a&gt;: discussions of the development of the Go project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/golang-nuts&#34;&gt;golang-nuts&lt;/a&gt;: general discussion list for the Go Programming Language.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;be-part-of-the-community&#34;&gt;Be part of the community&lt;/h2&gt;

&lt;p&gt;The Go community is super active. Just go &lt;a href=&#34;https://github.com/golang/go/wiki#the-go-community&#34;&gt;here&lt;/a&gt; to choose how you want to follow it. It’s important to follow the discussions if you’re seriously working with Go, you may discover useful things, or you could get to know important developments or projects that can impact your work.
And don’t forget the &lt;a href=&#34;https://golang.org/conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Good! Now that you know what to check .. just to do it and let us know when your preciousss will be available for us to enjoy! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Back from dotgo 2015</title>
      <link>http://www.alessandrobaffa.com/2015/11/10/back-from-dotgo-2015/</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2015/11/10/back-from-dotgo-2015/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../../../img/dotgo.jpeg&#34; alt=&#34;alt text&#34; title=&#34;dotgo2015&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Today I’ve been at the dotGo conference in Paris, the European conference about the Go programming language. Quick summary: &lt;strong&gt;fantastic!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s the second time I participate (I’ve been there also last year, 2014) and I found exactly the same impeccable organization, a beautiful location (with lots of food..), a great ambiance, and the talks, as usual, have been extremely interesting, inspiring and cool. Some of them (not in the same order of the conference):&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>