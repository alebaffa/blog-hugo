<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome</title>
    <link>http://www.alessandrobaffa.com/tags/software-craftsmanship/index.xml</link>
    <description>Recent content on Welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <copyright>(c) 2015 Alessandro Baffa.</copyright>
    <atom:link href="http://www.alessandrobaffa.com/tags/software-craftsmanship/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Transformation Priority Premise: overcome the fear of new tests</title>
      <link>http://www.alessandrobaffa.com/2016/07/05/transformation-priority-premise-overcome-the-fear-of-new-tests/</link>
      <pubDate>Tue, 05 Jul 2016 21:29:11 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/07/05/transformation-priority-premise-overcome-the-fear-of-new-tests/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&#34;&gt;The Transformation Priority Premise&lt;/a&gt; (TPP) is a great empirical list of transformations that you can apply in your code when you’re working in TDD:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/tpp.png&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;when-do-you-need-it&#34;&gt;When do you need it?&lt;/h2&gt;

&lt;p&gt;Practicing with TDD I realized that sometimes I reach a point when I get stuck: I am almost scared to add a new particular test because I already know it’s going to force me to completely rewrite the structure of the code.
The problem is that the more particular tests you add, the more generic your code has to become to handle all of them.&lt;/p&gt;

&lt;p&gt;TPP comes in handy at this point. When you feel you’re stuck, take a look at your code and start from the top of this list to see if there are some transformations that you can apply.&lt;/p&gt;

&lt;p&gt;Apply them even if you don’t see clearly how they will unblock you: the code itself will light up the path to follow.&lt;/p&gt;

&lt;h2 id=&#34;an-example-the-roman-numeral-kata&#34;&gt;An example: the Roman Numeral Kata&lt;/h2&gt;

&lt;p&gt;Inspired by the solution published by Codurance, I tried to practice with TPP using the same kata in Java. I made it several times and every time taking a look to the TPP list in order to see how I could use it.&lt;/p&gt;

&lt;p&gt;In few occasions I got stuck with the algorithm and just by applying one of the items in the list, the code itself suggested me how to proceed.
Let’s see few examples.&lt;/p&gt;

&lt;p&gt;At this point the code was handling only the case for 1, 2 and 3.
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/6944a3e84f7672505e11f3aa43dcd040.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Now I wanted to add the new test to handle 4. So, in TDD you start by doing the easiest thing, so I added a new element “IV” in the array. Tests pass.
At this point you clearly see the duplication of the string “I” and so I said “_OK, time to refactor_”. Well, how?&lt;/p&gt;

&lt;p&gt;So, I took the TPP list and the transformation 8) is (array -&amp;gt; container). So, I transformed the array to a collection that could be used as a dictionary:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/440d85e947fef253405fe45a6b144992.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Now let’s keep only “I” and “IV” from the collection and let’s see if there’s another transformation I can use.
Uhm, my method has only a return, so the transformation 9) (statement -&amp;gt; recursion) looks promising. I have now a collection that may have some useful methods I can take advantage from…let’s try:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/a692a3e1608c69c9a52db39db988a7b5.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Nice. Having a collection helped me to find an option that I wasn’t considering before.&lt;/p&gt;

&lt;h2 id=&#34;another-example&#34;&gt;Another example&lt;/h2&gt;

&lt;p&gt;At some point I had a lot of if statements:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/6fd459d1f2049fa70fc0f7db9b8fc717.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;The TPP(10) says (if -&amp;gt; while). So, I changed the code accordingly:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/ecb93847173129f279ff5de6ca8677dd.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;At this point the repetition is really visible. A lot of while statements doing the same things with a decreasing value in the condition. It looks like something that begs to be refactored again using recursion, and so here it is:
&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/a9111713ec0e3b6f6647e5ab6af6d4f1.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Transformation Priority Premise is really helpful. It’s a handy list of changes that you can apply easily and with no damage every time you are stuck or you don’t know how to make your code more generic.&lt;/p&gt;

&lt;h1 id=&#34;title&#34;&gt;Title&lt;/h1&gt;

&lt;p&gt;I am going to do again some code kata I already done using this technique.&lt;/p&gt;

&lt;p&gt;If you’re curious, you can see all the steps I’ve done in my implementation on &lt;a href=&#34;https://github.com/alebaffa/codekata/commits/master/src&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Practicing TDD: FizzBuzz kata in Golang</title>
      <link>http://www.alessandrobaffa.com/2016/06/19/practicing-tdd-fizzbuzz-kata-in-golang/</link>
      <pubDate>Sun, 19 Jun 2016 21:28:49 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/06/19/practicing-tdd-fizzbuzz-kata-in-golang/</guid>
      <description>&lt;p&gt;My implementation:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/4c32900a8ac8bd9793f44ddeaa3f3ce1.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;and here the list of all the steps that I’ve done to implement it in TDD on &lt;a href=&#34;https://github.com/alebaffa/codekata/commits/master/fizzbuzz&#34;&gt;my github account&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Community of Professionals - SoCraTes UK</title>
      <link>http://www.alessandrobaffa.com/2016/06/19/a-community-of-professionals---socrates-uk/</link>
      <pubDate>Sun, 19 Jun 2016 21:28:33 +0200</pubDate>
      
      <guid>http://www.alessandrobaffa.com/2016/06/19/a-community-of-professionals---socrates-uk/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../../../img/socrates.png&#34; alt=&#34;socrates place&#34; style=&#34;width: 300px; margin-right: 15px;&#34; align=&#34;left&#34;/&gt;&lt;/p&gt;

&lt;p&gt;A couple of weeks ago I participated for the first time to a SoCraTes event, one of the Software Craftsmanship international gatherings.
SoCraTes (Software Craftsmanship and Testing) is an self-organized conference where the people from the international Software Craftsmanship Community meet and spend 3 days organizing themselves activities and talks around everything related to software craftsmanship: from the technical to the human aspects of it.
There are few events of this kind every year (Italy, France, Germany, Belgium, Switzerland, Romania, Finland, Canaries) and I participated to the one in UK.&lt;/p&gt;

&lt;h2&gt;Location&lt;/h2&gt;

&lt;p&gt;The location was in Dorking, not far from Gatwick airport. A stunning place!
&lt;img src=&#34;../../../../img/socrates-out-1.jpeg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Organization — The Open Space&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s a self-organizing conference because the agenda is created every day by the participants through an Open Space. These were the market places of the two days (the third and last day was dedicated more to relax, chat and walk until people left).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/open-space-1.jpeg&#34; style=&#34;width: 400px; margin-right: 2px;&#34; align=&#34;left&#34; /&gt;
&lt;img src=&#34;../../../../img/open-space-2.jpeg&#34; style=&#34;width: 400px;&#34; align=&#34;left&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Personal experience&lt;/h2&gt;
It’s been maybe one of the most stimulating experiences I’ve ever participated to.&lt;/p&gt;

&lt;p&gt;Through the sessions in the event I really understood the meaning of Software Craftsmanship. I attended technical sessions about refactoring legacy code, TDD and functional programming, as well as other sessions related more to the human aspects of software development like Agile, technical coaching, Community of Practice, communication techniques and interesting comparisons between sport and development.&lt;/p&gt;

&lt;p&gt;Differently from a traditional conference, in the SoCraTes events the session are fully interactive and once they start they may also never really end: if people are interested they continue to work on it during the evening and the other days. The sessions organized during the event may also continue after the event itself, so starting cool open source projects that the entire community will one day benefit from. And it will happen very often, as far as I understood. And it’s so cool.&lt;/p&gt;

&lt;p&gt;The Software Craftsmanship international community is really awesome: friendly, open and welcoming people who meet in these events to share their passion, to discuss and challenge themselves and to help others to learn how to craft their careers and their skills.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;What I learned&lt;/h2&gt;
The biggest lesson for me that I learned from SoCraTes UK is to realize that software is about people and that too often our industry forgets about it.&lt;/p&gt;

&lt;p&gt;It’s not that I’ve never thought about empathy, diversity, inclusion and all these stuff, but meeting with a community of passionate people who put these things before the technicalities of software development (when they could fully do it considered their high technical skills) made me realize that maybe I’ve never put the right amount of focus on them.&lt;/p&gt;

&lt;p&gt;Software Craftsmanship is care about our industry and this includes everything, from the techniques it is based on to the people who work in it.&lt;/p&gt;

&lt;p&gt;It’s been my first SoCraTes event ever, but I will surely participate to the other ones as often as I can. The one in France is not so far from my house so I will surely go there!&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;If you want to get a glimpse of what SoCraTes UK was, register to the &lt;a href=&#34;https://scnewsletter.firebaseapp.com/&#34;&gt;Software Craftsmanship Newsletter&lt;/a&gt; that I created: the next issue will be fully dedicated to this events.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>